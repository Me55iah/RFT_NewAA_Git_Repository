// DO NOT EDIT: This file is automatically generated.
//
// Only the associated template file should be edited directly.
// Helper class files are automatically regenerated from the template
// files at various times, including record actions and test object
// insertion actions.  Any changes made directly to a helper class
// file will be lost when automatically updated.

package resources.Motor;
import Utilities.AA_SuperHelper;
import com.rational.test.ft.object.interfaces.*;
import com.rational.test.ft.object.interfaces.SAP.*;
import com.rational.test.ft.object.interfaces.WPF.*;
import com.rational.test.ft.object.interfaces.siebel.*;
import com.rational.test.ft.object.interfaces.flex.*;
import com.rational.test.ft.object.interfaces.dojo.*;
import com.rational.test.ft.object.interfaces.generichtmlsubdomain.*;
import com.rational.test.ft.script.*;
import com.rational.test.ft.vp.IFtVerificationPoint;
import com.ibm.rational.test.ft.object.interfaces.sapwebportal.*;
/**
 * Script Name   : <b>Additional_Driver_Convictions</b><br>
 * Generated     : <b>2015/02/19 16:07:41</b><br>
 * Description   : Helper class for script<br>
 * Original Host : Windows XP x86 5.1 <br>
 * 
 * @since  February 19, 2015
 * @author horned
 */
public abstract class Additional_Driver_ConvictionsHelper extends Utilities.AA_SuperHelper
{
	/**
	 * AddAConviction: with default state.
	 *		.alt : Add a conviction
	 * 		.id : 
	 * 		.src : https://prelive5.theaa.com/resources/images/journeys/buttons/add-conviction.png
	 * 		.title : 
	 * 		.class : Html.IMG
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected StatelessGuiSubitemTestObject image_addAConviction() 
	{
		return new StatelessGuiSubitemTestObject(
                        getMappedTestObject("image_addAConviction"));
	}
	/**
	 * AddAConviction: with specific test context and state.
	 *		.alt : Add a conviction
	 * 		.id : 
	 * 		.src : https://prelive5.theaa.com/resources/images/journeys/buttons/add-conviction.png
	 * 		.title : 
	 * 		.class : Html.IMG
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected StatelessGuiSubitemTestObject image_addAConviction(TestObject anchor, long flags) 
	{
		return new StatelessGuiSubitemTestObject(
                        getMappedTestObject("image_addAConviction"), anchor, flags);
	}
	
	/**
	 * Continue: with default state.
	 *		.alt : Continue
	 * 		.id : 
	 * 		.src : https://prelive5.theaa.com/resources/images/journeys/buttons/continue.png
	 * 		.title : 
	 * 		.class : Html.IMG
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected StatelessGuiSubitemTestObject image_continue() 
	{
		return new StatelessGuiSubitemTestObject(
                        getMappedTestObject("image_continue"));
	}
	/**
	 * Continue: with specific test context and state.
	 *		.alt : Continue
	 * 		.id : 
	 * 		.src : https://prelive5.theaa.com/resources/images/journeys/buttons/continue.png
	 * 		.title : 
	 * 		.class : Html.IMG
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected StatelessGuiSubitemTestObject image_continue(TestObject anchor, long flags) 
	{
		return new StatelessGuiSubitemTestObject(
                        getMappedTestObject("image_continue"), anchor, flags);
	}
	
	/**
	 * AddAConviction: with default state.
	 *		.text : Add a conviction
	 * 		.href : RegularExpression(.*additional-driver-detail.*)
	 * 		.id : 
	 * 		.title : 
	 * 		.class : Html.A
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected GuiTestObject link_addAConviction() 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_addAConviction"));
	}
	/**
	 * AddAConviction: with specific test context and state.
	 *		.text : Add a conviction
	 * 		.href : RegularExpression(.*additional-driver-detail.*)
	 * 		.id : 
	 * 		.title : 
	 * 		.class : Html.A
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected GuiTestObject link_addAConviction(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_addAConviction"), anchor, flags);
	}
	
	/**
	 * convictionConfirm: with default state.
	 *		.text : Next
	 * 		.href : https://prelive10.theaa.com/car-insurance/buy/additional-driver-details#
	 * 		.id : conviction-confirm
	 * 		.title : 
	 * 		.class : Html.A
	 * 		.name : 
	 * 		.classIndex : 1
	 */
	protected GuiTestObject link_convictionConfirm() 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_convictionConfirm"));
	}
	/**
	 * convictionConfirm: with specific test context and state.
	 *		.text : Next
	 * 		.href : https://prelive10.theaa.com/car-insurance/buy/additional-driver-details#
	 * 		.id : conviction-confirm
	 * 		.title : 
	 * 		.class : Html.A
	 * 		.name : 
	 * 		.classIndex : 1
	 */
	protected GuiTestObject link_convictionConfirm(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_convictionConfirm"), anchor, flags);
	}
	
	/**
	 * Next: with default state.
	 *		.text : Next
	 * 		.href : https://prelive5.theaa.com/car-insurance/buy/additional-driver-details#
	 * 		.id : 
	 * 		.title : 
	 * 		.class : Html.A
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected GuiTestObject link_next() 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_next"));
	}
	/**
	 * Next: with specific test context and state.
	 *		.text : Next
	 * 		.href : https://prelive5.theaa.com/car-insurance/buy/additional-driver-details#
	 * 		.id : 
	 * 		.title : 
	 * 		.class : Html.A
	 * 		.name : 
	 * 		.classIndex : 0
	 */
	protected GuiTestObject link_next(TestObject anchor, long flags) 
	{
		return new GuiTestObject(
                        getMappedTestObject("link_next"), anchor, flags);
	}
	
	/**
	 * aaMotorDrivers1Convictions0ConvictionType: with default state.
	 *		.text : Please select AC10 - Failing to stop after an accident AC20 - Failing to give pa ...
	 * 		.id : convictions-list
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : aa.motor.drivers[1].convictions[0].convictionType
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject list_aaMotorDrivers1Conviction() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_aaMotorDrivers1Conviction"));
	}
	/**
	 * aaMotorDrivers1Convictions0ConvictionType: with specific test context and state.
	 *		.text : Please select AC10 - Failing to stop after an accident AC20 - Failing to give pa ...
	 * 		.id : convictions-list
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : aa.motor.drivers[1].convictions[0].convictionType
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject list_aaMotorDrivers1Conviction(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_aaMotorDrivers1Conviction"), anchor, flags);
	}
	
	/**
	 * aaMotorDrivers1Convictions0DateMonth: with default state.
	 *		.text : Month January February March April May June July August September October Novemb ...
	 * 		.id : conviction-date-month
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : aa.motor.drivers[1].convictions[0].date.month
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject list_aaMotorDrivers1Conviction2() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_aaMotorDrivers1Conviction2"));
	}
	/**
	 * aaMotorDrivers1Convictions0DateMonth: with specific test context and state.
	 *		.text : Month January February March April May June July August September October Novemb ...
	 * 		.id : conviction-date-month
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : aa.motor.drivers[1].convictions[0].date.month
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject list_aaMotorDrivers1Conviction2(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_aaMotorDrivers1Conviction2"), anchor, flags);
	}
	
	/**
	 * aaMotorDrivers1Convictions0DateYear: with default state.
	 *		.text : Year 2008 2009 2010 2011 2012 2013
	 * 		.id : conviction-date-year
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : aa.motor.drivers[1].convictions[0].date.year
	 * 		.classIndex : 1
	 */
	protected SelectGuiSubitemTestObject list_aaMotorDrivers1Conviction3() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_aaMotorDrivers1Conviction3"));
	}
	/**
	 * aaMotorDrivers1Convictions0DateYear: with specific test context and state.
	 *		.text : Year 2008 2009 2010 2011 2012 2013
	 * 		.id : conviction-date-year
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : aa.motor.drivers[1].convictions[0].date.year
	 * 		.classIndex : 1
	 */
	protected SelectGuiSubitemTestObject list_aaMotorDrivers1Conviction3(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_aaMotorDrivers1Conviction3"), anchor, flags);
	}
	
	/**
	 * aaMotorDrivers1Convictions0PointsIncurred: with default state.
	 *		.text : 0 1 2 3 4 5 6 7 8 9 10 11 12
	 * 		.id : points-incurred
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : aa.motor.drivers[1].convictions[0].pointsIncurred
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject list_aaMotorDrivers1Conviction4() 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_aaMotorDrivers1Conviction4"));
	}
	/**
	 * aaMotorDrivers1Convictions0PointsIncurred: with specific test context and state.
	 *		.text : 0 1 2 3 4 5 6 7 8 9 10 11 12
	 * 		.id : points-incurred
	 * 		.title : 
	 * 		.class : Html.SELECT
	 * 		.name : aa.motor.drivers[1].convictions[0].pointsIncurred
	 * 		.classIndex : 0
	 */
	protected SelectGuiSubitemTestObject list_aaMotorDrivers1Conviction4(TestObject anchor, long flags) 
	{
		return new SelectGuiSubitemTestObject(
                        getMappedTestObject("list_aaMotorDrivers1Conviction4"), anchor, flags);
	}
	
	/**
	 * aaMotorDrivers1Convictions0Bannedfalse: with default state.
	 *		.id : ban-no
	 * 		.type : radio
	 * 		.value : false
	 * 		.title : 
	 * 		.class : Html.INPUT.radio
	 * 		.name : aa.motor.drivers[1].convictions[0].banned
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject radioButton_aaMotorDrivers1Con() 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("radioButton_aaMotorDrivers1Con"));
	}
	/**
	 * aaMotorDrivers1Convictions0Bannedfalse: with specific test context and state.
	 *		.id : ban-no
	 * 		.type : radio
	 * 		.value : false
	 * 		.title : 
	 * 		.class : Html.INPUT.radio
	 * 		.name : aa.motor.drivers[1].convictions[0].banned
	 * 		.classIndex : 0
	 */
	protected ToggleGUITestObject radioButton_aaMotorDrivers1Con(TestObject anchor, long flags) 
	{
		return new ToggleGUITestObject(
                        getMappedTestObject("radioButton_aaMotorDrivers1Con"), anchor, flags);
	}
	
	/**
	 * aaMotorDrivers1Convictions0FineIncurred: with default state.
	 *		.id : fine-incurred
	 * 		.type : text
	 * 		.title : 
	 * 		.class : Html.INPUT.text
	 * 		.name : aa.motor.drivers[1].convictions[0].fineIncurred
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject text_aaMotorDrivers1Conviction() 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_aaMotorDrivers1Conviction"));
	}
	/**
	 * aaMotorDrivers1Convictions0FineIncurred: with specific test context and state.
	 *		.id : fine-incurred
	 * 		.type : text
	 * 		.title : 
	 * 		.class : Html.INPUT.text
	 * 		.name : aa.motor.drivers[1].convictions[0].fineIncurred
	 * 		.classIndex : 0
	 */
	protected TextGuiTestObject text_aaMotorDrivers1Conviction(TestObject anchor, long flags) 
	{
		return new TextGuiTestObject(
                        getMappedTestObject("text_aaMotorDrivers1Conviction"), anchor, flags);
	}
	
	

	protected Additional_Driver_ConvictionsHelper()
	{
		setScriptName("Motor.Additional_Driver_Convictions");
	}
	
}

